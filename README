# Transcript Syncer

Automatically downloads Google Meet transcripts from Google Drive and adds them to the appropriate folder of the local Obsidian vault.

This tool has 3 parts:
1. The Google Apps Script watches for new files to be created, and moves them into an appropriate Google Drive folder.
2. The local business checks specific Google Drive folders for new transcript files, downloads them, formats them with appropriate frontmatter/context, and saves them to designated folders in an Obsidian vault.
3. com.mattobrien.transcriptsyncer.plist runs the downloader every 5 mins

Setup:
1. Ensure Google Drive API credentials are in ../credentials/
2. Create symbolic link for launchd:
   ln -s /Users/mattobrien/Documents/Projects/transcript-syncer/launchd/com.mattobrien.transcriptsyncer.plist ~/Library/LaunchAgents/com.mattobrien.transcriptsyncer.plist
3. Load the launchd job:
   launchctl load ~/Library/LaunchAgents/com.mattobrien.transcriptsyncer.plist

To stop the service:
launchctl unload ~/Library/LaunchAgents/com.mattobrien.transcriptsyncer.plist

To check status:
launchctl list | grep transcriptsyncer


## Current Status (as of 2024-12-10)

- ✓ Basic functionality working
  - Connects to Google Drive
  - Downloads transcripts
  - Formats for Obsidian
  - Runs as background service

- ✓ Fixed issues
  - State file handling improved with retry logic
  - File existence checks prevent reprocessing
  - Better error handling for API timeouts

- ✓ Multi-folder support added
  - Handles multiple source folders
  - Maps to different destination folders
  - Maintains single state file

- ✓ Smart formatting
  - Parses dates from filenames
  - Standardized filename format: `TS. YYYY-MM-DD - ...`
  - Folder-specific related links:
    - Customer Calls: Links to user testing pipeline
    - Dragon: Links to Dragon dashboard
    - Meetings: Links to daily note for meeting date

- ✓ Service issues resolved
  - Launchd service now running correctly
  - Successfully processing new transcripts
  - Some timeout errors on older files

## Meeting Type Codes

Coming soon: Standardized codes for meeting types to ensure accurate folder sorting.

Planned format:
- DM: Dragon & Matt meetings
- CC: Customer Calls
- ST: Standups
- etc.

(TODO: Define final code list and update Google Apps Script to match exactly on these codes)

## Planned Improvements

1. Current Issues
   - Add stats for current run (processed, skipped, errors)
   - Better network timeout handling
   - Make header template configurable
   - Fix "None is not subscriptable" warning

2. User Interface Options
   - Current: Terminal commands for status and control
   - Potential: Mac menu bar status indicator
   - Future: Obsidian plugin version
     - Show sync status in Obsidian
     - Configure through Obsidian settings

3. File Matching Improvements
   - Define standardized meeting type codes
   - Update Google Drive script to use exact code matching
   - Prevent false matches (e.g., "Dragon party" -> Dragon folder)
   - Document meeting codes in README

## Security Notes

The current setup stores Google API credentials unencrypted in the credentials folder. While the service account has limited access (only to explicitly shared folders with read-only permissions), a more secure approach would be:

1. Store credentials in macOS Keychain:
   ```bash
   # Install keyring
   pip install keyring

   # Store credentials
   security add-generic-password -s "transcript-syncer" -a "google-credentials" -w "$(cat credentials/transcript-syncer-131b6cd620c8.json)"
   ```

2. Update script to use Keychain instead of file:
   ```python
   credentials = get_credentials()  # Instead of from_service_account_file
   ```

This improvement is planned for a future update.

## Setup

1. Google Cloud Console setup:
   - Create project
   - Enable Drive API
   - Create service account
   - Download credentials
   - Share Drive folders with service account

2. Local setup:
   ```bash
   # Create project structure
   mkdir -p transcript-syncer/{src,credentials,state,logs,downloads}

   # Install dependencies
   pip install google-api-python-client

   # Place credentials file
   mv service-account.json transcript-syncer/credentials/

   # Create launchd symlink
   ln -s /path/to/transcript-syncer/launchd/com.mattobrien.transcriptsyncer.plist ~/Library/LaunchAgents/
   ```

3. Configure launchd service:
   ```bash
   launchctl load ~/Library/LaunchAgents/com.mattobrien.transcriptsyncer.plist
   ```

## How It Works

1. Runs every 5 minutes via launchd
2. Checks configured Google Drive folders for new transcripts
3. Downloads as markdown
4. Adds context/metadata
5. Saves to appropriate Obsidian folder
6. Tracks processed files in state file

## Project Structure

```
transcript-syncer/
├── src/
│   └── transcript_downloader.py  # Main script
│   └── google_drive_file_mover.js  # Main script
├── credentials/           # Google API credentials
├── state/                # Tracks processed files
├── logs/                # Script logging
├── downloads/           # Downloaded transcripts
└── launchd/             # Service configuration
```

## Usage

```bash
# Start service
launchctl load ~/Library/LaunchAgents/com.mattobrien.transcriptsyncer.plist

# Stop service
launchctl unload ~/Library/LaunchAgents/com.mattobrien.transcriptsyncer.plist

# Check status
launchctl list | grep transcriptsyncer

# View logs
tail -f ~/Documents/Projects/transcript-syncer/logs/transcript_syncer.log
```

## Configuration

Key configuration points:
- Google Drive folder IDs
- Local paths
- Update frequency
- Logging levels

## Path Mappings

Google Drive folders and their corresponding local Obsidian paths:

| Type | Drive Folder ID | Local Path |
|------|----------------|------------|
| Customer Calls | 108_9MeB539PK6NVEjgARZuQKfms_PPt0 | /Users/mattobrien/Obsidian Main Vault/ObsidianVault/-No Instructions/User testing/Transcripts |
| Dragon | 1FsPM-xB7EH6Fc2CCu67EHDhYMotx0EYc | /Users/mattobrien/Obsidian Main Vault/ObsidianVault/Oceano/Principals/Dragon/=Dragon & Matt/Transcripts |
| Meetings | 1EiScFFGiE6hdKBOZeSicnO_lxv2U3mcB | /Users/mattobrien/Obsidian Main Vault/ObsidianVault/-No Instructions/Daily/Transcripts |

## Adding a New Folder

To add a new folder to be monitored and synced:

1. Create new folder in Google Drive

2. Share folder with service account:
   - Share with: `transcript-syncer-service@transcript-syncer.iam.gserviceaccount.com`
   - Role: Viewer

3. Update Google Apps Script (`script.js`):
   - Add new folder ID to constants
   - Add handling logic in `sortMeetingTranscripts()`

4. Update Python script (`src/transcript_downloader.py`):
   - Add new folder mapping to `FOLDER_MAPPINGS` dictionary:
   ```python
   FOLDER_MAPPINGS = {
       "NEW_FOLDER_ID": "/path/to/destination/folder",
       # ... existing mappings ...
   }
   ```

5. Test new configuration:
   - Move a test transcript to the new folder in Drive
   - Run syncer to verify it downloads to correct location

## Known Behaviors (as of 2024-12-10)
- Files take 20-40 seconds each to process
- Google Drive API occasionally times out on older files
- Script overwrites existing files rather than creating duplicates
